const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// User is our "model class"
const User = mongoose.model('users');

// this function takes the user id generated by MongoDB (NOT the google id)
// and stuffs it in a cookie in the users browser
// the reason we use the ID generated by MongoDB, and not the google id
// is because the user may have signed in using a different Oauth service (Twitter, Github, etc)
passport.serializeUser((user, done) => {
	done(null, user.id);
});


// this function will take the id and turn it into a mongoose model instance
passport.deserializeUser((id, done) => {
	User.findById(id)
		.then(user => {
			done(null, user);
		});
});

// passport.use is like saying "passport, there is a new strategy available. make use of it"
// new GoogleStrategy creates a new instance of the google strategy.
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback'
		},
		(accessToken, refreshToken, profile, done) => {
			User.findOne({ googleID: profile.id })
				.then((existingUser) => {
					if (existingUser) {
						// we already have a record with the given profileID

						// the first argument passed into the done callback is an error
						// because there is no error, we pass in null
						// the second argument is the record that we found in the database
						// this tells passport that we are done here
						done(null, existingUser);
					} else {
						// we dont have a user record with this ID, make a new record

						// this creates a mongoose model instance
						// this represents a single record in our collection
						// we then save the instance, and in the callback, we get another instance
						new User({ googleID: profile.id }).save()
							// this is the second instance
							.then(user => done(null, user));
					}
				});
		}
	)
);